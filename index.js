// 개발자 => js (전방위에서 활용) => front, backend
// c++ : 기계친화적(메모리관리, 최적화)
// python : 인공지능 (대규모 데이터 활용)

// c++ => js
// 비디오개발자들을 대거 채용해서 스페이스X 소프트웨어 제작

// 웹. 앱 서비스 => 여행 컨텐츠 웹. 앱 서비스
// 웹서비스 : 무신사 => 커뮤니티화(비지니스모델 채용)
// 여행 커뮤니티화. => 네이버, 다음 카페

// 여행 가기전 : 여행 계획 => 트리플 => 앱.웹 => 숙박, 비행
// 여행 중 : 여행지 정보 => 트리플
// 여행 후 : 여행 후기 => 여행 가기전

// 지출 왕복 비행, 숙박 => 호텔 트리바고, 부킹닷컴, 컴바인, 에어비앤비

//* graph theory

//* 꼭짓점, 정점 : vertex  , 교점 : node
//* 변, 간선 : edge, link, line
//* 방향성 : directed, undirected
//* 연결 : incident
//* 인접 : adjacent, neighbors
//* 차수 : degree

//* 경로 : path
//* 최단경로 : shortest path

//* 순환 : cycle
//* 방향성 비순환 그래프 : directed acyclic graph(dag)

//* 가중치 : weight
//* 가중그래프 : weighted graph
//* 가중 방향 그래프 : weighted directed graph

//* directed graph 용어
//* 입력차수 : in-degree
//* 출력차수 : out-degree

//* 주기 : cycle 안에 시작이외에 반복되는 edge나 node가 없을 때

//* 표현 방법
//* 1. 연결선 리스트(Edge lists)
//! E(변) 만큼의 공간 필요.
//! 특정 E를 찾으려면 선형 검색
//? 변을 찾는데 O(logE)시간 내에 찾으려면 연결선 리스트를 어떻게 구성해야하는가
const edgeList = [
	[0, 1],
	[0, 6],
	[0, 8],
	[1, 4],
	[1, 6],
	[1, 9],
	[2, 4],
	[2, 6],
	[3, 4],
	[3, 5],
	[3, 8],
	[4, 5],
	[4, 9],
	[7, 8],
	[7, 9],
];

//* 2. 인접 행렬(Adjacent Matrix)
//! V(정점)^2 만큼의 공간 필요.
//! 비방향 그래프는 대칭.
//! 탐색은 O(1)
const UndirectedAdjMatrix = [
	[0, 1, 0, 0, 0, 0, 1, 0, 1, 0],
	[1, 0, 0, 0, 1, 0, 1, 0, 0, 1],
	[0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
	[0, 0, 0, 0, 1, 1, 0, 0, 1, 0],
	[0, 1, 1, 1, 0, 1, 0, 0, 0, 1],
	[0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
	[1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
	[1, 0, 0, 1, 0, 0, 0, 1, 0, 0],
	[0, 1, 0, 0, 1, 0, 0, 1, 0, 0],
];

const weightedAdjMatrix = [
	[0, 8, 0, 0, 0, 0, 10, 0, 4, 0],
	[10, 0, 0, 0, 2, 0, 3, 0, 0, 1],
	[0, 0, 0, 0, 1, 0, 8, 0, 0, 0],
	[0, 0, 0, 0, 4, 3, 0, 0, 2, 0],
	[0, 1, 2, 3, 0, 7, 0, 0, 0, 6],
	[0, 0, 0, 4, 1, 0, 0, 0, 0, 0],
	[5, 4, 1, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 8, 9],
	[1, 0, 0, 8, 0, 0, 0, 5, 0, 0],
	[0, 7, 0, 0, 7, 0, 0, 2, 0, 0],
];

//* 3. 인접 리스트(Adjacent List)
//! E 탐색에 d(degree)만큼 걸린다. => 인접리스트의 길이.
const adjList = [
	[1, 6, 8],
	[0, 4, 6, 9],
	[4, 6],
	[4, 5, 8],
	[1, 2, 3, 5, 9],
	[3, 4],
	[0, 1, 2],
	[8, 9],
	[0, 3, 7],
	[1, 4, 7],
];
